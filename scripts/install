#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url="/"
is_public=$YNH_APP_ARG_IS_PUBLIC
admin=$YNH_APP_ARG_ADMIN

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path="/var/www/$app"
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path "$path_url")

test ! "$path_url" != "/" ||  ynh_die 'The path should be "/" for now...'

# Check web path availability
ynh_webpath_available "$domain" "$path_url"
# Register (book) web path
ynh_webpath_register "$app" "$domain" "$path_url"

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set "$app" domain "$domain"
ynh_app_setting_set "$app" path "$path_url"
ynh_app_setting_set "$app" is_public "$is_public"
ynh_app_setting_set "$app" admin "$admin"

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# FIND AND OPEN A PORT
#=================================================

# Find a free port
# port=$(ynh_find_port 5000)
# Open this port
# yunohost firewall allow --no-upnp TCP "$port" 2>&1
# ynh_app_setting_set "$app" port "$port"

#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies python-pip python-virtualenv python-dev libxml2-dev \
	libxslt-dev libjpeg-dev libffi-dev zlib1g-dev \
	`# add dbus glib gobject-introspection and cairo2` \
	dbus-x11 libglib2.0-dev libgirepository1.0-dev libcairo2-dev

#=================================================
# CREATE A PostgreSQL DATABASE
#=================================================

# ynh_psql_test_if_first_run

# db_name=$(ynh_sanitize_dbid "$app")
# db_user=$db_name
# db_pwd=$(ynh_string_random)
# Initialize database and store postgres password for upgrade
# ynh_psql_create_db "$db_name" "$db_user" "$db_pwd"
# ynh_app_setting_set "$app" db_name "$db_name"
# ynh_app_setting_set "$app" psqlpwd "$db_pwd"

# systemctl reload postgresql

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set "$app" final_path "$final_path"
# Download, check integrity, uncompress for Salut à Toi
ynh_setup_source "$final_path"
ynh_setup_source "$final_path/sat_media"  "app-media"

mkdir "$final_path/.local"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
# ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app" "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# PYTHON DEPENDENCIES
#=================================================

virtualenv --system-site-packages "$final_path/venv"
(
	set +o nounset
	source "${final_path}/venv/bin/activate"
	set -o nounset
	pip install --upgrade pip
	pip install --upgrade setuptools
	pip install wheel
	# install Salut à Toi
	pip install sat==0.7.0a1 --ignore-installed pyasn1
)

#=================================================
# MODIFY THE CONFIG FILE
#=================================================

configfile="$final_path/sat.conf"

cp ../conf/sat.conf "$configfile"

key=$(ynh_string_random)

ynh_app_setting_set "$app" key "$key"

ynh_replace_string "__DOMAIN__"    "$domain"      "$configfile"
ynh_replace_string "__FINALPATH__" "$final_path"  "$configfile"
ynh_replace_string "__KEY__"       "$key"         "$configfile"
ynh_replace_string "__ADMIN__"     "$admin"       "$configfile"

#=================================================
# ADD DBUS EXEC FILE
#=================================================

cp ../conf/bin/dbus-exec.sh "$final_path/bin/dbus-exec.sh"
cp ../conf/bin/dbus-launch.sh "$final_path/bin/dbus-launch.sh"

#=================================================
# SETUP SYSTEMD
#=================================================

# ynh_add_systemd_config "${app}_dbus_user" "service-dbus_user.service"
ynh_add_systemd_config "$app" "service-sat.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions to app files
# chown -R "$app": "$final_path"
chmod +x "$final_path/bin/"*
chown -R "$app" "$final_path/.local"

#=================================================
# SETUP SSOWAT
#=================================================

if [ "$is_public" -eq 0 ]
then	# Remove the public access
	ynh_app_setting_delete "$app" skipped_uris
fi
# Make app public if necessary
if [ "$is_public" -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway.
	ynh_app_setting_set "$app" unprotected_uris "/"
fi

#=================================================
# RELOAD NGINX
#=================================================

systemctl start "$app"
systemctl reload nginx